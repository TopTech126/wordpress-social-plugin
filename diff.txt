diff --git a/facebook.php b/facebook.php
index 8d3e702..a7a06bd 100644
--- a/facebook.php
+++ b/facebook.php
@@ -42,14 +42,12 @@ unset( $facebook_plugin_directory );
 register_uninstall_hook( __FILE__, 'fb_uninstall' );
 
 function fb_uninstall() {
-    
     $meta_keys = array('state', 'code', 'access_token', 'user_id', 'fb_data');
-    
+
     foreach ( $meta_keys as $meta_key ) {
-        delete_user_meta( get_current_user_id(), $meta_key );    
+      delete_user_meta( get_current_user_id(), $meta_key );
     }
-    
+
     delete_option( 'fb_options' );
     delete_option( 'fb_flush_rewrite_rules' );
 }
-
diff --git a/fb-wp-helpers.php b/fb-wp-helpers.php
index 20651d4..7dfee52 100644
--- a/fb-wp-helpers.php
+++ b/fb-wp-helpers.php
@@ -1,274 +1,281 @@
-<?php
-function fb_admin_dialog($message, $error = false) {
-	if ($error) {
-		$class = 'error';
-	}
-	else {
-		$class = 'updated';
-	}
-	
-	echo '<div ' . ( $error ? 'id="facebook_warning" ' : '') . 'class="' . $class . ' fade' . '"><p>'. $message . '</p></div>';
-}
-
-function fb_construct_fields($placement, $children, $parent = null, $object = null) {
-	$options = get_option('fb_options');
-
-	if ($placement == 'widget') {
-		echo fb_construct_fields_children('widget', $children, null, $object);
-	}
-	else if ($placement == 'settings') {
-
-		if ($parent) {
-			$enabled = isset($options[$parent['name']]['enabled']);
-			if (isset($parent['image'])) {
-				echo '<div class="fb_admin_image">';
-				echo '<img src="' . esc_url( $parent['image'] ) . '"/>';
-			} else {
-				echo '<div>';
-			}
-			echo '<h3>';
-			echo '<input type="checkbox" name="fb_options[' . esc_attr( $parent['name'] ). '][enabled]" value="true" id="' . esc_attr( $parent['name'] ) . '" ' . checked( $enabled, 1, false ) . ' onclick="toggleOptions(\'' . esc_js( $parent['name'] ) . '\', [\'' . esc_js( $parent['name'] ) . '_table\'])">';
-			echo ' <label for="' . esc_attr($parent['name']) . '">' . esc_html( $parent['label'] ) . '</label></h3>';
-			echo '<p class="description">' . esc_html( $parent['description'] ) . ' <a href="' . esc_url( $parent['help_link'] ) . '" target="_new" title="' . esc_attr( $parent['description'] ) . '">' . __( 'Read more', 'facebook') . '</a></p>';
-		} else {
-			$enabled = true;
-			echo '<div>';
-		}
-
-		echo '<table class="form-table" id="' . esc_attr( $parent['name'] ) . '_table" style="display:' . ( $enabled ?'block':'none') . '">
-						<tbody>';
-
-		echo fb_construct_fields_children('settings', $children, $parent);
-
-		echo '</tbody>
-					</table>';
-			echo '</div>';
-
-	}
-}
-
-function fb_construct_fields_children($place, $fields, $parent = null, $object = null) {
-
-	if ( $place == 'widget' ) {
-		$options = $object->get_settings();
-		$parent_name = $object->number;
-	} elseif ($place == 'settings') {
-		$options = get_option('fb_options');
-		$parent_name = $parent['name'];
-	}
-
-	if ( $place == 'widget' ) {
-		foreach ( $fields as $c => $field ) {
-			$field['value'] = fb_array_default(
-				$options, $parent_name, $field['name'], (
-					empty($parent['name']['enabled']) ?
-						fb_array_default($field, 'default', '') : ''
-				)
-			);
-			$field['name'] = $object->get_field_name( $field['name'] );
-			$fields[$c] = $field;
-		}
-	}
-    elseif ($place == 'settings') { 
-		foreach ($fields as $c => $field) {
-            if ($parent) {
-				$value = fb_array_default(
-					$options, $parent['name'], $field['name'], (
-						empty($options[$parent['name']]['enabled']) ?
-							fb_array_default($field, 'default', '') : ''
-					)
-				);
-			}
-			else {
-				$value = fb_array_default(
-					$options, $field['name'],
-					fb_array_default($field, 'default', '')
-				);
-			}
-
-			$parent_js_array = '';
-			if ($parent) {
-				$parent_js_array = '[' . $parent['name'] . ']';
-			}
-
-            $field['value'] = $value;
-			$field['name'] = "fb_options$parent_js_array"."[" . $field['name'] ."]";
-			$fields[$c] = $field;
-		}
-	}
-	return fb_fields($fields, $place);
-}
-
-function fb_array_default() { // $array, $keys..., $default
-	$keys = func_get_args();
-	$array = array_shift($keys);
-    $default = array_pop($keys);
-    $key = array_shift($keys);
-	if (!isset($array[$key])) {
-		return $default;
-	}
-	$array = $array[$key];
-	if (sizeof($keys)>0) {
-		array_unshift($keys, $array);
-        array_push($keys, $default);
-		return call_user_func_array('fb_array_default', $keys);
-    }
-	return $array;
-}
-
-function fb_fields($fields, $place='settings') {
-	$buffer = '';
-	foreach ($fields as $field) {
-		$buffer .= fb_field($field, $place);
-	}
-	return $buffer;
-}
-
-function fb_field($field, $place='settings') {
-	extract($field);
-
-	if (!isset($label)) {
-		$label = trim(
-			ucfirst(
-				str_replace(
-					array("_", "]"), " ",
-					array_pop(
-						explode('[', $name)
-					)
-				)
-			)
-		);
-	}
-	$label = sprintf(
-		'<label for="%1$s">%2$s</label>',
-		esc_attr($name),
-		esc_html($label)
-	);
-
-	if (isset($help_link)) {
-		$help = sprintf(
-			'<a href="%s" target="_new" title="%s" class="wp_help_link">[?]</a>',
-			esc_attr($help_link),
-			esc_attr($help_text)
-		);
-	} else {
-		$help = sprintf(
-			'<span title="%s" class="wp_help_hover">[?]</span>',
-			esc_attr($help_text)
-		);
-	}
-
-	$widget = call_user_func("fb_field_$type", $field, $place);
-
-	switch ($place) {
-		case 'widget':
-			if ($type=='checkbox') {
-				$field_pattern = '<p>%3$s %1$s %2$s</p>';
-			} else {
-				$field_pattern = '<p>%1$s: %2$s<br />%3$s</p>';
-			}
-			break;
-		case 'settings':
-			$field_pattern = '<tr valign="top"><th scope="row">%1$s %2$s</th><td>%3$s</td></tr>';
-			break;
-	}
-
-	return sprintf(
-		$field_pattern,
-		$label,
-		$help,
-		$widget
-	);
-
-}
-
-function fb_field_text($field, $place='settings') {
-	return sprintf(
-		'<input type="text" id="%1$s" name="%1$s" value="%2$s" %3$s/>',
-		esc_attr($field['name']),
-		esc_attr($field['value']),
-		$place=='widget' ? 'class="widefat"' : ""
-	);
-}
-
-function fb_field_checkbox($field, $place='settings') {
-	$onclick = '';	
-		
-	if (isset($field['onclick'])) {
-		$onclick = $field['onclick'];
-	}
-
-    if (isset($field['options'])) {
-        foreach ($field['options'] as $option_value => $option_label) {
-            $buffer .= sprintf(
-                '<label for="%2$s">%1$s</label><input type="checkbox" class="multicheckbox" id="%2$s" name="%2$s" onclick="%3$s" value="true" %4$s />',
-                esc_html($option_label),
-                esc_attr($field['name'] . "[$option_label]"),
-                esc_js( $onclick ),
-                checked($field['value'][$option_label], 'true', false)
-            );
-        }
-        return $buffer;
-    } else {
-        return sprintf(
-            '<input type="checkbox" id="%1$s" name="%1$s" onclick="%2$s" value="true" %3$s />',
-            esc_attr($field['name']),
-            esc_js( $onclick ),
-            checked($field['value'], 'true', false)
-        );
-    }
-}
-
-function fb_field_dropdown($field, $place='settings') {
-	$buffer = sprintf(
-		'<select id="%1$s" name="%1$s" %2$s>',
-		esc_attr($field['name']),
-		$place=='widget' ? 'class="widefat"' : ""
-	);
-
-	foreach ($field['options'] as $option_value => $option_label) {
-		$buffer .= sprintf(
-			'<option value="%1$s" %2$s>%3$s</option>',
-			esc_attr($option_value),
-			selected($field['value'], $option_value, false),
-			esc_html($option_label)
-		);
-	}
-
-	$buffer .= '</select>';
-	return $buffer;
-}
-
-function fb_field_disabled_text($field, $place='settings') {
-	return $field['disabled_text'];
-}
-
-function fb_get_user_meta( $user_id, $meta_key, $single = false ) {
-	$override = apply_filters( 'fb_get_user_meta', false, $user_id, $meta_key, $single );
-	if ( false !== $override )
-		return $override;
-
-	return get_user_meta( $user_id, $meta_key, $single );
-}
-
-function fb_update_user_meta( $user_id, $meta_key, $meta_value, $prev_value = '' ) {
-	$override = apply_filters( 'fb_update_user_meta', false, $user_id, $meta_key, $meta_value, $prev_value );
-	if ( false !== $override )
-		return $override;
-
-	return update_user_meta( $user_id, $meta_key, $meta_value, $prev_value );
-}
-
-function fb_delete_user_meta( $user_id, $meta_key, $meta_value = '' ) {
-	$override = apply_filters( 'fb_delete_user_meta', false, $user_id, $meta_key, $meta_value );
-	if ( false !== $override )
-		return $override;
-
-	return delete_user_meta( $user_id, $meta_key, $meta_value );
-}
-
-
-function fb_option_name($field){
+<?php
+function fb_admin_dialog($message, $error = false) {
+	if ($error) {
+		$class = 'error';
+	}
+	else {
+		$class = 'updated';
+	}
+
+	echo '<div ' . ( $error ? 'id="facebook_warning" ' : '') . 'class="' . $class . ' fade' . '"><p>'. $message . '</p></div>';
+}
+
+function fb_construct_fields($placement, $children, $parent = null, $object = null) {
+	$options = get_option('fb_options');
+
+	if ($placement == 'widget') {
+		echo fb_construct_fields_children('widget', $children, null, $object);
+	}
+	else if ($placement == 'settings') {
+
+		if ($parent) {
+			$enabled = isset($options[$parent['name']]['enabled']);
+			if (isset($parent['image'])) {
+				echo '<div class="fb_admin_image">';
+				echo '<img src="' . esc_url( $parent['image'] ) . '"/>';
+			} else {
+				echo '<div>';
+			}
+			echo '<h3>';
+			echo '<input type="checkbox" name="fb_options[' . esc_attr( $parent['name'] ). '][enabled]" value="true" id="' . esc_attr( $parent['name'] ) . '" ' . checked( $enabled, 1, false ) . ' onclick="toggleOptions(\'' . esc_js( $parent['name'] ) . '\', [\'' . esc_js( $parent['name'] ) . '_table\'])">';
+			echo ' <label for="' . esc_attr($parent['name']) . '">' . esc_html( $parent['label'] ) . '</label></h3>';
+			echo '<p class="description">' . esc_html( $parent['description'] ) . ' <a href="' . esc_url( $parent['help_link'] ) . '" target="_new" title="' . esc_attr( $parent['description'] ) . '">' . __( 'Read more', 'facebook') . '</a></p>';
+		} else {
+			$enabled = true;
+			echo '<div>';
+		}
+
+		echo '<table class="form-table" id="' . esc_attr( $parent['name'] ) . '_table" style="display:' . ( $enabled ?'block':'none') . '">
+						<tbody>';
+
+		echo fb_construct_fields_children('settings', $children, $parent);
+
+		echo '</tbody>
+					</table>';
+			echo '</div>';
+
+	}
+}
+
+function fb_construct_fields_children($place, $fields, $parent = null, $object = null) {
+
+	if ( $place == 'widget' ) {
+		$options = $object->get_settings();
+		$parent_name = $object->number;
+	} elseif ($place == 'settings') {
+		$options = get_option('fb_options');
+		$parent_name = $parent['name'];
+	}
+
+	if ( $place == 'widget' ) {
+		foreach ( $fields as $c => $field ) {
+			$field['value'] = fb_array_default(
+				$options, $parent_name, $field['name'], (
+					empty($parent['name']['enabled']) ?
+						fb_array_default($field, 'default', '') : ''
+				)
+			);
+			$field['name'] = $object->get_field_name( $field['name'] );
+			$fields[$c] = $field;
+		}
+	}
+    elseif ($place == 'settings') {
+		foreach ($fields as $c => $field) {
+            if ($parent) {
+				$value = fb_array_default(
+					$options, $parent['name'], $field['name'], (
+						empty($options[$parent['name']]['enabled']) ?
+							fb_array_default($field, 'default', '') : ''
+					)
+				);
+			}
+			else {
+				$value = fb_array_default(
+					$options, $field['name'],
+					fb_array_default($field, 'default', '')
+				);
+			}
+
+			$parent_js_array = '';
+			if ($parent) {
+				$parent_js_array = '[' . $parent['name'] . ']';
+			}
+
+            $field['value'] = $value;
+			$field['name'] = "fb_options$parent_js_array"."[" . $field['name'] ."]";
+			$fields[$c] = $field;
+		}
+	}
+	return fb_fields($fields, $place);
+}
+
+function fb_array_default() { // $array, $keys..., $default
+	$keys = func_get_args();
+	$array = array_shift($keys);
+    $default = array_pop($keys);
+    $key = array_shift($keys);
+	if (!isset($array[$key])) {
+		return $default;
+	}
+	$array = $array[$key];
+	if (sizeof($keys)>0) {
+		array_unshift($keys, $array);
+        array_push($keys, $default);
+		return call_user_func_array('fb_array_default', $keys);
+    }
+	return $array;
+}
+
+function fb_fields($fields, $place='settings') {
+	$buffer = '';
+	foreach ($fields as $field) {
+		$buffer .= fb_field($field, $place);
+	}
+	return $buffer;
+}
+
+function fb_field($field, $place='settings') {
+	extract($field);
+
+	if (!isset($label)) {
+		$label = trim(
+			ucfirst(
+				str_replace(
+					array("_", "]"), " ",
+					array_pop(
+						explode('[', $name)
+					)
+				)
+			)
+		);
+	}
+	$label = sprintf(
+		'<label for="%1$s">%2$s</label>',
+		esc_attr($name),
+		esc_html($label)
+	);
+
+	if (isset($help_link)) {
+		$help = sprintf(
+			'<a href="%s" target="_new" title="%s" class="wp_help_link">[?]</a>',
+			esc_attr($help_link),
+			esc_attr($help_text)
+		);
+	} else {
+		$help = sprintf(
+			'<span title="%s" class="wp_help_hover">[?]</span>',
+			esc_attr($help_text)
+		);
+	}
+
+	$widget = call_user_func("fb_field_$type", $field, $place);
+
+	switch ($place) {
+		case 'widget':
+			if ($type=='checkbox') {
+				$field_pattern = '<p>%3$s %1$s %2$s</p>';
+			} else {
+				$field_pattern = '<p>%1$s: %2$s<br />%3$s</p>';
+			}
+			break;
+		case 'settings':
+			$field_pattern = '<tr valign="top"><th scope="row">%1$s %2$s</th><td>%3$s</td></tr>';
+			break;
+	}
+
+	return sprintf(
+		$field_pattern,
+		$label,
+		$help,
+		$widget
+	);
+
+}
+
+function fb_field_text($field, $place='settings') {
+	return sprintf(
+		'<input type="text" id="%1$s" name="%1$s" value="%2$s" %3$s/>',
+		esc_attr($field['name']),
+		esc_attr($field['value']),
+		$place=='widget' ? 'class="widefat"' : ""
+	);
+}
+
+function fb_field_checkbox($field, $place='settings') {
+	$onclick = '';
+	$buffer = '';
+
+	if (isset($field['onclick'])) {
+		$onclick = $field['onclick'];
+	}
+
+    if (isset($field['options'])) {
+			foreach ($field['options'] as $option_value => $option_label) {
+				if ( !isset( $field['value'][$option_label] ) ) {
+					$field['value'][$option_label] = '';
+				}
+
+				$buffer .= sprintf('<label for="%2$s">%1$s</label><input type="checkbox" class="multicheckbox" id="%2$s" name="%2$s" onclick="%3$s" value="true" %4$s />',
+													 esc_html($option_label),
+													 esc_attr($field['name'] . "[$option_label]"),
+													 esc_js( $onclick ),
+													 checked($field['value'][$option_label], 'true', false)
+            );
+        }
+
+        return $buffer;
+    } else {
+        return sprintf(
+            '<input type="checkbox" id="%1$s" name="%1$s" onclick="%2$s" value="true" %3$s />',
+            esc_attr($field['name']),
+            esc_js( $onclick ),
+            checked($field['value'], 'true', false)
+        );
+    }
+}
+
+function fb_field_dropdown($field, $place='settings') {
+	$buffer = '';
+
+	$buffer = sprintf(
+		'<select id="%1$s" name="%1$s" %2$s>',
+		esc_attr($field['name']),
+		$place=='widget' ? 'class="widefat"' : ""
+	);
+
+	foreach ($field['options'] as $option_value => $option_label) {
+		$buffer .= sprintf(
+			'<option value="%1$s" %2$s>%3$s</option>',
+			esc_attr($option_value),
+			selected($field['value'], $option_value, false),
+			esc_html($option_label)
+		);
+	}
+
+	$buffer .= '</select>';
+	return $buffer;
+}
+
+function fb_field_disabled_text($field, $place='settings') {
+	return $field['disabled_text'];
+}
+
+function fb_get_user_meta( $user_id, $meta_key, $single = false ) {
+	$override = apply_filters( 'fb_get_user_meta', false, $user_id, $meta_key, $single );
+	if ( false !== $override )
+		return $override;
+
+	return get_user_meta( $user_id, $meta_key, $single );
+}
+
+function fb_update_user_meta( $user_id, $meta_key, $meta_value, $prev_value = '' ) {
+	$override = apply_filters( 'fb_update_user_meta', false, $user_id, $meta_key, $meta_value, $prev_value );
+	if ( false !== $override )
+		return $override;
+
+	return update_user_meta( $user_id, $meta_key, $meta_value, $prev_value );
+}
+
+function fb_delete_user_meta( $user_id, $meta_key, $meta_value = '' ) {
+	$override = apply_filters( 'fb_delete_user_meta', false, $user_id, $meta_key, $meta_value );
+	if ( false !== $override )
+		return $override;
+
+	return delete_user_meta( $user_id, $meta_key, $meta_value );
+}
+
+
+function fb_option_name($field){
 	switch ($field) {
 		case 'app_id':
 			return 'App ID';
@@ -296,23 +303,23 @@ function fb_option_name($field){
 			break;
 		case 'comments':
 			return "Comments Box";
-			break;
-		default:
-			return '';
 			break;
-	}
-}
-
-function fb_sanitize_options ($options_array) {
-    foreach ($options_array as $key => $value) {
-        if (is_array($value)) {
-            $options_array[$key] = fb_sanitize_options($value);
-        } else {
-            $options_array[$key] = sanitize_text_field($value);
-        }
-    }
-    return $options_array;
-}
-
-
-?>
+		default:
+			return '';
+			break;
+	}
+}
+
+function fb_sanitize_options ($options_array) {
+    foreach ($options_array as $key => $value) {
+        if (is_array($value)) {
+            $options_array[$key] = fb_sanitize_options($value);
+        } else {
+            $options_array[$key] = sanitize_text_field($value);
+        }
+    }
+    return $options_array;
+}
+
+
+?>
diff --git a/readme.txt b/readme.txt
index f61b75f..d53c805 100644
--- a/readme.txt
+++ b/readme.txt
@@ -115,4 +115,15 @@ Facebook Insights (http://www.facebook.com/insights) integration included. This
 
 = 1.0 =
 
-* Launch.
\ No newline at end of file
+* Launch.
+
+== Upgrade Notice ==
+
+= 1.0.3 =
+Fixes many bugs, added support for custom post types. Once you upgrade, please choose options next to "Shown on" and re-save your settings.
+
+= 1.0.2 =
+Fixes many bugs.
+
+= 1.0.1 =
+Fixes many critical bugs.
\ No newline at end of file
diff --git a/social-plugins/fb-comments.php b/social-plugins/fb-comments.php
index fdb6f58..cbcb82a 100644
--- a/social-plugins/fb-comments.php
+++ b/social-plugins/fb-comments.php
@@ -12,10 +12,6 @@ function fb_hide_wp_comments() {
 	wp_enqueue_style( 'fb_hide_wp_comments', plugins_url( 'style/hide-wp-comments.css', dirname(__FILE__)), array(), '1.0' );
 }
 
-function fb_hide_wp_comments_homepage() {
-	return '';
-}
-
 function fb_set_wp_comment_status ( $posts ) {
 	if ( ! empty( $posts ) && is_singular() ) {
 		$posts[0]->comment_status = 'open';
@@ -52,16 +48,17 @@ function fb_comments_automatic($content) {
 		if ( comments_open( get_the_ID() ) && post_type_supports( get_post_type(), 'comments' ) ) {
 			$options = get_option('fb_options');
 			$show_indiv = get_post_meta( $post->ID, 'fb_social_plugin_settings_box_comments', true );
-            if ( ! is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset( $options['comments']['show_on'] ) && isset( $options['comments']['show_on'][$post->post_type] ) ) {
-                foreach( $options['comments'] as $param => $val ) {
-                    $param = str_replace( '_', '-', $param );
 
-                    $params[$param] = $val;
-                }
+			if ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset( $options['comments']['show_on'] ) && isset( $options['comments']['show_on'][$post->post_type] ) ) {
+				foreach( $options['comments'] as $param => $val ) {
+					$param = str_replace( '_', '-', $param );
+
+					$params[$param] = $val;
+				}
 
-                $content .= fb_get_comments( $params );
+				$content .= fb_get_comments( $params );
 			}
-			elseif ( 'show' == $show_indiv || ( ( ! isset( $options['comments']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) {
+			elseif ( !is_home() && 'show' == $show_indiv || ( ( ! isset( $options['comments']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) {
 				foreach( $options['comments'] as $param => $val ) {
 					$param = str_replace( '_', '-', $param );
 
@@ -138,38 +135,40 @@ function fb_get_comments_fields_array() {
 									'help_link' => 'https://developers.facebook.com/docs/reference/plugins/comments/',
 									'image' => plugins_url( '/images/settings_comments.png', dirname(__FILE__))
 									);
-    $post_types = get_post_types(array('public' => true));
+
+	$post_types = get_post_types(array('public' => true));
+
 	$array['children'] = array(array('name' => 'num_posts',
-													'label' => 'Number of posts',
-													'type' => 'text',
-													'default' => 20,
-													'help_text' => 'The number of posts to display by default.',
-													),
-										array('name' => 'width',
-													'type' => 'text',
-													'default' => '470',
-													'help_text' => 'The width of the plugin, in pixels.',
-													),
-										array('name' => 'colorscheme',
-													'label' => 'Color scheme',
-													'type' => 'dropdown',
-													'default' => 'light',
-													'options' => array('light' => 'light', 'dark' => 'dark'),
-													'help_text' => 'The color scheme of the plugin.',
-													),
-										array('name' => 'show_on',
-													'type' => 'checkbox',
-													'default' => array_fill_keys(array_keys($post_types) , 'true'),
-													'options' => $post_types,
-													'help_text' => __( 'Whether the plugin will appear on all posts or pages by default. If "individual posts and pages" is selected, you must explicitly set each post and page to display the plugin.', 'facebook' ),
-                         ),
-                    array('name' => 'homepage_comments',
-                          'label' => 'Show comment counts on the homepage',
-                          'type' => 'checkbox',
-                          'default' => 'true',
-                          'help_text' => __('Whether the plugin will display a comment count for each post on the homepage.'),
-                         )
-										);
+																	 'label' => 'Number of posts',
+																	 'type' => 'text',
+																	 'default' => 20,
+																	 'help_text' => 'The number of posts to display by default.',
+																	 ),
+														 array('name' => 'width',
+																	 'type' => 'text',
+																	 'default' => '470',
+																	 'help_text' => 'The width of the plugin, in pixels.',
+																	 ),
+														 array('name' => 'colorscheme',
+																	 'label' => 'Color scheme',
+																	 'type' => 'dropdown',
+																	 'default' => 'light',
+																	 'options' => array('light' => 'light', 'dark' => 'dark'),
+																	 'help_text' => 'The color scheme of the plugin.',
+																	 ),
+														 array('name' => 'show_on',
+																	 'type' => 'checkbox',
+																	 'default' => array_fill_keys(array_keys($post_types) , 'true'),
+																	 'options' => $post_types,
+																	 'help_text' => __( 'Which page or post types this will appear on. If no options are checked, you must explicitly set each post or page to display the plugin.', 'facebook' ),
+																	 ),
+														 array('name' => 'homepage_comments',
+																	 'label' => 'Show comment counts on the homepage',
+																	 'type' => 'checkbox',
+																	 'default' => 'true',
+																	 'help_text' => __('Whether the plugin will display a comment count for each post on the homepage.'),
+																	 )
+														 );
 
 	return $array;
 }
diff --git a/social-plugins/fb-like.php b/social-plugins/fb-like.php
index 0dd255e..d30d6d3 100644
--- a/social-plugins/fb-like.php
+++ b/social-plugins/fb-like.php
@@ -15,22 +15,22 @@
 
 function fb_get_like_button($options = array()) {
     $params = fb_build_social_plugin_params($options, 'like');
-	
+
 	return '<div class="fb-like fb-social-plugin" ' . $params . ' ></div>';
 }
 
 function fb_like_button_automatic($content) {
 	$options = get_option('fb_options');
-    
-    global $post;
-	
+
+  global $post;
+
 	if ( isset ( $post ) ) {
 		if ( isset($options['like']['show_on_homepage']) ) {
 			$options['like']['href'] = get_permalink($post->ID);
 		}
-		
+
 		$new_content = '';
-	
+
 		switch ($options['like']['position']) {
 			case 'top':
 				$new_content = fb_get_like_button($options['like']) . $content;
@@ -43,16 +43,19 @@ function fb_like_button_automatic($content) {
 				$new_content .= fb_get_like_button($options['like']);
 				break;
 		}
-	
+
 		$show_indiv = get_post_meta( $post->ID, 'fb_social_plugin_settings_box_like', true );
-		
+
+    //if the homepage is being displayed and the option to display the plugin on the homepage is enabled
 		if ( is_home() && isset ( $options['like']['show_on_homepage'] ) && isset ( $options['like']['show_on'] ) && isset( $options['like']['show_on'][ $post->post_type ] ) ) {
 			$content = $new_content;
 		}
-		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['like']['show_on'] ) && isset( $options['like']['show_on'][ $post->post_type ]) ) {		
-            $content = $new_content;
+    //if it's not the homepage, check for global
+		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['like']['show_on'] ) && isset( $options['like']['show_on'][ $post->post_type ]) ) {
+      $content = $new_content;
 		}
-		elseif ( !is_home() && ('show' == $show_indiv || ( ( ! isset( $options['like']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) )) {
+    //if it's not the homepage, check for individual
+		elseif ( !is_home() && ('show' == $show_indiv || ( ( ! isset( $options['like']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) ) {
 			$content = $new_content;
 		}
 	}
@@ -108,12 +111,12 @@ class Facebook_Like_Button extends WP_Widget {
 	 */
 	public function update( $new_instance, $old_instance ) {
 		$return_instance = $old_instance;
-		
+
 		$fields = fb_get_like_fields_array('widget');
-		
+
 		foreach( $fields['children'] as $field ) {
 			$unsafe_value = ( isset( $new_instance[$field['name']] ) ) ? $new_instance[$field['name']] : '';
-			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) ) 
+			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) )
 				$return_instance[$field['name']] = $field['sanitization_callback']( $unsafe_value );
 			else
 				$return_instance[$field['name']] = sanitize_text_field( $unsafe_value );
@@ -196,15 +199,15 @@ function fb_get_like_fields_array($placement) {
 													'default' => 'both',
 													'options' => array('top' => 'top', 'bottom' => 'bottom', 'both' => 'both'),
 													'help_text' => __( 'Where the button will display on the page or post.', 'facebook' ),
-                                                );
-        $post_types = get_post_types(array('public' => true));
-        //unset($post_types['attachment']);
-        //$post_types = array_values($post_types);
-		$array['children'][] = array('name' => 'show_on',
+                          );
+
+    $post_types = get_post_types(array('public' => true));
+
+    $array['children'][] = array('name' => 'show_on',
 													'type' => 'checkbox',
 													'default' => array_fill_keys(array_keys($post_types) , 'true'),
-													'options' => $post_types, 
-													'help_text' => __( 'Whether the plugin will appear on all posts or pages by default. If "individual posts and pages" is selected, you must explicitly set each post and page to display the plugin.', 'facebook' ),
+													'options' => $post_types,
+													'help_text' => __( 'Which page or post types this will appear on. If no options are checked, you must explicitly set each post or page to display the plugin.', 'facebook' ),
 													);
 		$array['children'][] = array('name' => 'show_on_homepage',
 													'type' => 'checkbox',
diff --git a/social-plugins/fb-recommendations-bar.php b/social-plugins/fb-recommendations-bar.php
index c5ad409..b25aff7 100644
--- a/social-plugins/fb-recommendations-bar.php
+++ b/social-plugins/fb-recommendations-bar.php
@@ -10,14 +10,14 @@ function fb_recommendations_bar_automatic( $content ) {
 	$show_indiv = get_post_meta( $post->ID, 'fb_social_plugin_settings_box_recommendations_bar', true );
 	$options = get_option('fb_options');
 	if ( ! is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset( $options['recommendations_bar']['show_on']) && isset( $options['recommendations_bar']['show_on'][$post->post_type] ) )  {
-        $content .= fb_get_recommendations_bar( $options['recommendations_bar'] );
+    $content .= fb_get_recommendations_bar( $options['recommendations_bar'] );
 	}
 	elseif ( 'show' == $show_indiv || ( ( ! isset( $options['recommendations_bar']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) {
 		$content .= fb_get_recommendations_bar( $options['recommendations_bar'] );
 	}
 	//elseif ( 'no' == $show_indiv ) {
 	//}
-	
+
 	return $content;
 }
 
@@ -59,11 +59,11 @@ function fb_get_recommendations_bar_fields_array() {
 													'help_text' => __( 'The side of the window that the plugin will display.', 'facebook' ),
 													),
 										array('name' => 'show_on',
-                                                    'type' => 'checkbox',
-                                                    'default' => array_fill_keys(array_keys($post_types) , 'true'),
-                                                    'options' => $post_types,
-                                                    'help_text' => __( 'Whether the plugin will appear on all posts or pages by default. If "individual posts and pages" is selected, you must explicitly set each post and page to display the plugin.', 'facebook' ),
-													)
+                          'type' => 'checkbox',
+                          'default' => array_fill_keys(array_keys($post_types) , 'true'),
+                          'options' => $post_types,
+                          'help_text' => __( 'Which page or post types this will appear on. If no options are checked, you must explicitly set each post or page to display the plugin.', 'facebook' ),
+                          )
 										);
 
 	return $array;
diff --git a/social-plugins/fb-send.php b/social-plugins/fb-send.php
index 7361d78..a0e5a80 100644
--- a/social-plugins/fb-send.php
+++ b/social-plugins/fb-send.php
@@ -7,16 +7,16 @@ function fb_get_send_button($options = array()) {
 
 function fb_send_button_automatic($content) {
 	$options = get_option('fb_options');
-	
+
 	global $post;
-	
+
 	if ( isset( $post ) ) {
 		if ( isset( $options['send']['show_on_homepage'] ) ) {
 			$options['send']['href'] = get_permalink($post->ID);
 		}
-	
+
 		$new_content = '';
-	
+
 		switch ( $options['send']['position'] ) {
 			case 'top':
 				$new_content = fb_get_send_button( $options['send'] ) . $content;
@@ -29,21 +29,21 @@ function fb_send_button_automatic($content) {
 				$new_content .= fb_get_send_button( $options['send'] );
 				break;
 		}
-		
+
 		$show_indiv = get_post_meta( $post->ID, 'fb_social_plugin_settings_box_send', true );
-		
+
 		if ( is_home() && isset ( $options['send']['show_on_homepage'] ) && isset( $options['send']['show_on'] ) && isset( $options['send']['show_on'][$post->post_type] ) ) {
 			$content = $new_content;
 		}
-		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['send']['show_on'] ) && isset( $options['send']['show_on'][$post->post_type] ) ) {		
-            $content = $new_content;
+		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['send']['show_on'] ) && isset( $options['send']['show_on'][$post->post_type] ) ) {
+      $content = $new_content;
 		}
 		elseif ( !is_home() && ('show' == $show_indiv || ( ( ! isset( $options['send']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) ) {
 			$content = $new_content;
 		}
-		
+
 	}
-	
+
 
 	return $content;
 }
@@ -97,17 +97,17 @@ class Facebook_Send_Button extends WP_Widget {
 	 */
 	public function update( $new_instance, $old_instance ) {
 		$return_instance = $old_instance;
-		
+
 		$fields = fb_get_send_fields_array('widget');
-		
+
 		foreach( $fields['children'] as $field ) {
 			$unsafe_value = ( isset( $new_instance[$field['name']] ) ) ? $new_instance[$field['name']] : '';
-			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) ) 
+			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) )
 				$return_instance[$field['name']] = $field['sanitization_callback']( $unsafe_value );
 			else
 				$return_instance[$field['name']] = sanitize_text_field( $unsafe_value );
 		}
-		
+
 		return $return_instance;
 	}
 
@@ -156,29 +156,30 @@ function fb_get_send_fields_array($placement) {
 
 	if ($placement == 'settings') {
 		$array['children'][] = array('name' => 'position',
-													'type' => 'dropdown',
-													'default' => 'both',
-													'options' => array('top' => 'top', 'bottom' => 'bottom', 'both' => 'both'),
-													'help_text' => __( 'Where the button will display on the page or post.', 'facebook' ),
-													);
-        
-        $post_types = get_post_types(array('public' => true));
-        $array['children'][] = array('name' => 'show_on',
-													'type' => 'checkbox',
-                                                    'default' => array_fill_keys(array_keys($post_types) , 'true'),
-                                                    'options' => $post_types,
-                                                    'help_text' => __( 'Whether the plugin will appear on all posts or pages by default. If "individual posts and pages" is selected, you must explicitly set each post and page to display the plugin.', 'facebook' ),
-													);
+                                 'type' => 'dropdown',
+                                 'default' => 'both',
+                                 'options' => array('top' => 'top', 'bottom' => 'bottom', 'both' => 'both'),
+                                 'help_text' => __( 'Where the button will display on the page or post.', 'facebook' ),
+                                 );
+
+    $post_types = get_post_types(array('public' => true));
+
+    $array['children'][] = array('name' => 'show_on',
+                                 'type' => 'checkbox',
+                                 'default' => array_fill_keys(array_keys($post_types) , 'true'),
+                                 'options' => $post_types,
+                                 'help_text' => __( 'Which page or post types this will appear on. If no options are checked, you must explicitly set each post or page to display the plugin.', 'facebook' ),
+                                 );
 		$array['children'][] = array('name' => 'show_on_homepage',
-													'type' => 'checkbox',
-													'default' => true,
-													'help_text' => __( 'If the plugin should appear on the homepage as part of the Post previews.  If unchecked, the plugin will only display on the Post itself.', 'facebook' ),
-													);
+                                 'type' => 'checkbox',
+                                 'default' => true,
+                                 'help_text' => __( 'If the plugin should appear on the homepage as part of the Post previews.  If unchecked, the plugin will only display on the Post itself.', 'facebook' ),
+                                 );
 	}
 
 	if ($placement == 'widget') {
 		$title_array = array('name' => 'title',
-													'type' => 'text',
+                         'type' => 'text',
 													'help_text' => __( 'The title above the button.', 'facebook' ),
 													);
 		$text_array = array('name' => 'href',
diff --git a/social-plugins/fb-social-plugins.php b/social-plugins/fb-social-plugins.php
index d072414..5c63c7b 100644
--- a/social-plugins/fb-social-plugins.php
+++ b/social-plugins/fb-social-plugins.php
@@ -24,7 +24,6 @@ function fb_apply_filters() {
 	if ( ! is_array( $options ) )
 		return;
 
-
 	if ( array_key_exists( 'recommendations_bar', $options ) && array_key_exists( 'enabled', $options['recommendations_bar'] ) && $options['recommendations_bar']['enabled'] ) {
 		add_filter('the_content', 'fb_recommendations_bar_automatic', 30);
 	}
@@ -46,11 +45,12 @@ function fb_apply_filters() {
 		add_filter( 'comments_array', 'fb_close_wp_comments' );
 		add_filter( 'the_posts', 'fb_set_wp_comment_status' );
 		add_action( 'wp_enqueue_scripts', 'fb_hide_wp_comments', 0);
-	if ( isset($options['comments']['homepage_comments']['enabled']) ) {
-		add_filter( 'comments_number', 'fb_get_comments_count' );
-	} else {
-		add_filter( 'comments_number', 'fb_hide_wp_comments_homepage' );
-	}
+
+    if ( isset($options['comments']['homepage_comments']['enabled'] ) ) {
+      add_filter( 'comments_number', 'fb_get_comments_count' );
+    } else {
+      add_filter( 'comments_number', 'fb_hide_wp_comments_homepage' );
+    }
 	}
 }
 add_action( 'init', 'fb_apply_filters' );
diff --git a/social-plugins/fb-subscribe.php b/social-plugins/fb-subscribe.php
index 3f8a6bf..d0c9ab0 100644
--- a/social-plugins/fb-subscribe.php
+++ b/social-plugins/fb-subscribe.php
@@ -7,25 +7,25 @@ function fb_get_subscribe_button($options = array()) {
 
 function fb_subscribe_button_automatic($content) {
 	$options = get_option('fb_options');
-	
+
 	global $post;
-	
+
 	if ( isset ($post ) ) {
 		if ( isset( $options['subscribe']['show_on_homepage'] ) ) {
-		
+
 			$options['subscribe']['href'] = get_permalink( $post->ID );
 		}
-		
+
 		$fb_data = fb_get_user_meta( get_the_author_meta( 'ID' ), 'fb_data', true );
-	
+
 		if ( ! $fb_data ) {
 			return $content;
 		}
-	
+
 		$options['subscribe']['href'] = 'http://www.facebook.com/' . $fb_data['username'];
-	
+
 		$new_content = '';
-	
+
 		if ( isset( $fb_data['username'] ) ) {
 			switch ( $options['subscribe']['position'] ) {
 				case 'top':
@@ -40,20 +40,20 @@ function fb_subscribe_button_automatic($content) {
 					break;
 			}
 		}
-	
+
 		$show_indiv = get_post_meta( $post->ID, 'fb_social_plugin_settings_box_subscribe', true );
-		
+
 		if ( is_home() && isset ( $options['subscribe']['show_on_homepage'] ) && isset( $options['subscribe']['show_on'] ) && isset( $options['subscribe']['show_on'][$post->post_type] ) ) {
 			$content = $new_content;
 		}
-		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['subscribe']['show_on'] ) && isset( $options['subscribe']['show_on'][$post->post_type] ) ) {		
+		elseif ( !is_home() && ( 'default' == $show_indiv || empty( $show_indiv ) ) && isset ( $options['subscribe']['show_on'] ) && isset( $options['subscribe']['show_on'][$post->post_type] ) ) {
             $content = $new_content;
 		}
 		elseif ( !is_home() && ('show' == $show_indiv || ( ( ! isset( $options['subscribe']['show_on'] ) ) && ( 'default' == $show_indiv || empty( $show_indiv ) ) ) ) ) {
 			$content = $new_content;
 		}
 	}
-	
+
 	return $content;
 }
 
@@ -109,17 +109,17 @@ class Facebook_Subscribe_Button extends WP_Widget {
 	 */
 	public function update( $new_instance, $old_instance ) {
 		$return_instance = $old_instance;
-		
+
 		$fields = fb_get_subscribe_fields_array('widget');
-		
+
 		foreach( $fields['children'] as $field ) {
 			$unsafe_value = ( isset( $new_instance[$field['name']] ) ) ? $new_instance[$field['name']] : '';
-			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) ) 
+			if ( !empty( $field['sanitization_callback'] ) && function_exists( $field['sanitization_callback'] ) )
 				$return_instance[$field['name']] = $field['sanitization_callback']( $unsafe_value );
 			else
 				$return_instance[$field['name']] = sanitize_text_field( $unsafe_value );
 		}
-		
+
 		return $return_instance;
 	}
 
@@ -185,17 +185,19 @@ function fb_get_subscribe_fields_array($placement) {
 
 	if ($placement == 'settings') {
 		$array['children'][] = array('name' => 'position',
-													'type' => 'dropdown',
-													'default' => 'both',
-													'options' => array('top' => 'top', 'bottom' => 'bottom', 'both' => 'both'),
-													'help_text' => __( 'Where the button will display on the page or post.', 'facebook' ),
-                                                );
-        $post_types = get_post_types(array('public' => true));
-		$array['children'][] = array('name' => 'show_on',
-                                                    'type' => 'checkbox',
-                                                    'default' => array_fill_keys(array_keys($post_types) , 'true'),
-                                                    'options' => $post_types,
-                                                    'help_text' => __( 'Whether the plugin will appear on all posts or pages by default. If "individual posts and pages" is selected, you must explicitly set each post and page to display the plugin.', 'facebook' ),
+                                 'type' => 'dropdown',
+                                 'default' => 'both',
+                                 'options' => array('top' => 'top', 'bottom' => 'bottom', 'both' => 'both'),
+                                 'help_text' => __( 'Where the button will display on the page or post.', 'facebook' ),
+                                 );
+
+    $post_types = get_post_types(array('public' => true));
+
+    $array['children'][] = array('name' => 'show_on',
+                                 'type' => 'checkbox',
+                                 'default' => array_fill_keys(array_keys($post_types) , 'true'),
+                                 'options' => $post_types,
+                                 'help_text' => __( 'Which page or post types this will appear on. If no options are checked, you must explicitly set each post or page to display the plugin.', 'facebook' ),
 													);
 		$array['children'][] = array('name' => 'show_on_homepage',
 													'type' => 'checkbox',
